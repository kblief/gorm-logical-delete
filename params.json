{"name":"Gorm Logical Delete","tagline":"groovy grails logical delete gorm","body":"[![Build Status](https://travis-ci.org/saboya/gorm-logical-delete.svg?branch=master)](https://travis-ci.org/saboya/gorm-logical-delete) [![Coverage Status](https://coveralls.io/repos/saboya/gorm-logical-delete/badge.svg?branch=master)](https://coveralls.io/r/saboya/gorm-logical-delete?branch=master)\r\nGorm Logical Delete\r\n===================\r\n\r\nThis plugin allows you to do a logical deletion of the domain classes.\r\nThe main intention of the plugin is to handle cases when certain entities cannot be physically removed from the database.\r\n\r\n## How it works:\r\n\r\nA boolean property is injected in the annotated domain class using [AST transformations](http://groovy.codehaus.org/Compile-time+Metaprogramming+-+AST+Transformations). This property is used to track the logical _deleted state_ of the entity. The name and deleted state value can be customized.\r\n\r\nThe GORM method __delete()__ is modified to avoid the physical removal and just change the value of the _delete state_ property.\r\n\r\nTo handle read queries, a __PreQueryEvent__ listener is added in order to make the logical delete logic transparent, adding another criteria to the query so it doesn't match deleted entities.\r\n\r\n## How to use:\r\n\r\nTo provide logical deletion to a domain class you just need to add the __@GormLogicalDelete__ annotation to it.\r\n\r\n```groovy\r\n@GormLogicalDelete\r\nclass User {\r\n   String lastName\r\n   String firstName\r\n   String nickName\r\n    ...\r\n}\r\n```\r\n\r\nTo make a logical removal you just need to use the GORM method _delete_.\r\n\r\n```groovy\r\nuser.delete()\r\n```\r\nwhich would be the equivalent to: (using default settings)\r\n\r\n```groovy\r\nuser.deleted = true\r\nuser.save()\r\n```\r\nIf you want to force a physical deletion to an annotated class, you have to add the __logicalDelete__ parameter set to _false_ to the _delete_ method:\r\n\r\n```groovy\r\nuser.delete(logicalDelete: false)\r\n```\r\n\r\nIf you want to query the __logically__ deleted elements, you can use the _withDeleted_ method to execute a closure that includes the deleted items:\r\n\r\n```groovy\r\nuser.withDeleted {\r\n\tdef deletedUserList = User.list()\r\n}\r\n```\r\n\r\n## Customization:\r\n\r\nThe plugin also supports customization of the property used and the deletedState value, in order to support current manual implementations.\r\nFor example, if your current implementation relies on the __enabled__ property being set to _false_ in order to logically delete an entity, you would declare your annotation like this:\r\n\r\n\r\n```groovy\r\n@GormLogicalDelete(property = \"enabled\",deletedState = false)\r\nclass User {\r\n   String lastName\r\n   String firstName\r\n   String nickName\r\n    ...\r\n}\r\n```\r\nIt defaults to _property_ = __\"deleted\"__ and _deletedState_ = __true__\r\n\r\n## IntelliJ code-completion:\r\n\r\nThere's a GDSL file bundled with code-completion for the _deletdState_ property and _withDeleted_ method.\r\n\r\n## Credits:\r\n\r\nThis plugin is a fork from the [logical-delete](https://github.com/nanlabs/logical-delete) plugin. The original plugin relied on Hibernate filters and HawkEventing, and that wouldn't work for me since I needed it to stay 100% on GORM to be database-agnostic.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}